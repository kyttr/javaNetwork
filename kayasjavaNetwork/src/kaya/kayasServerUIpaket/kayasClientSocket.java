/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * kayasClientSocket.java
 *
 * Created on Mar 15, 2012, 10:55:10 PM
 */
package kaya.kayasServerUIpaket;

import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import kaya.kayaClassPaket.*;
import java.io.IOException;
import java.net.*;
import java.util.*;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.io.*;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import javax.swing.JFrame;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author kaya
 */
public class kayasClientSocket extends javax.swing.JFrame implements OlayDinleyenlerInterface {

    // global değişkenler
    Socket myClientSoket;
    LinkedList<LinkedList<String>> myClientSoketInfos;
    LinkedList<Integer> paramsforClientSocket;
    String host;
    Thread serverDinleThread;
    kayasSocketThread soketThread;
    GelenNesneTipleri gnt;

    public void OlayOlmus(OlayNesnesi olay) {
        /*
         * http://www.javaworld.com/javaworld/javaqa/2002-03/01-qa-0315-happyevent.html?page=2
         */
        Object nesne = olay.kaynakNesne();
        //gnt=new GelenNesneTipleri();
        gnt = new GelenNesneTipleri(nesne);
        try {
            gnt.properlyAssignGelenObje();
        } catch (IOException ex) {
            Logger.getLogger(kayasClientSocket.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(kayasClientSocket.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*
        if (nesne instanceof BufferedImage) {
        //            gnt.gelenResim=(BufferedImage) nesne;
        kayaNetworkAbstractClass1.bufferedImage2JLabel(gnt.gelenResim, jLabel_screenShot);
        } else if (nesne instanceof String) {
        //            gnt.gelenStr=(String) nesne;
        jTextArea_readFromSocket.append(gnt.gelenStr + "\n");
        } else if (nesne instanceof File) {
        //            gnt.gelenDosya=(File) nesne;
        jTextArea_readFromSocket.append("Dosya geldi : " +  gnt.gelenDosya.getAbsolutePath() + "\n");
        } else if (nesne instanceof DefaultMutableTreeNode) {
        //            gnt.setGelenDMTN((DefaultMutableTreeNode) nesne);
        gnt.gelenDMTN2DosyaBilgilerTreeNode();

        //uiSwingMetotlar.dosyaBilgilerTree2List(gnt.gelenDMTN, jList_dizinler, jList_dosyalar);
        uiSwingMetotlar.dosyaBilgilerTree2List(gnt.getGelenDMTN(), jList_dizinler, jList_dosyalar);
        }
         */

        if (!gnt.gelenStr.isEmpty()) {
            jTextArea_readFromSocket.append(gnt.gelenStr + "\n");
        } else if (gnt.gelenDosya != null) {
            jTextArea_readFromSocket.append("Dosya geldi : " + gnt.gelenDosya.getAbsolutePath() + "\n");
        } else if (gnt.gelenResim != null) {
            uiSwingMetotlar.bufferedImage2JLabel(gnt.gelenResim, jLabel_screenShot);
        } else if (gnt.getGelenDMTN() != null) {
//            uiSwingMetotlar.dosyaBilgilerTree2List(gnt.getGelenDMTN(), jList_dizinler, jList_dosyalar);
        }

    }

    /** Creates new form kayasClientSocket */
    public kayasClientSocket() {
        initComponents();
        //Q - Her buton için : "enter" ile buton aktifleşir.
        //Component[] bilesenDizi=this.getComponents(); // işe yaramıyor.

        SwingAbsractClass.enterPressesWhenFocused(jButton_initializeAndSetSocket);
        SwingAbsractClass.enterPressesWhenFocused(jButton_readFromSocket);
        SwingAbsractClass.enterPressesWhenFocused(jButton_write2Socket);
        //Q         //
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSpinner_setTrafficClass = new javax.swing.JSpinner();
        jSpinner_port = new javax.swing.JSpinner();
        jSpinner_connectionTime = new javax.swing.JSpinner();
        jComboBox_setKeepAlive = new javax.swing.JComboBox();
        jSpinner_latency = new javax.swing.JSpinner();
        jSpinner_setReceiveBufferSize = new javax.swing.JSpinner();
        jSpinner_bandwidth = new javax.swing.JSpinner();
        jComboBox_setOOBInline = new javax.swing.JComboBox();
        jComboBox_setReuseAddress = new javax.swing.JComboBox();
        jSpinner_setSendBufferSize = new javax.swing.JSpinner();
        jComboBox_setSoLinger_On = new javax.swing.JComboBox();
        jSpinner_setSoLinger_linger = new javax.swing.JSpinner();
        jSpinner_timeout = new javax.swing.JSpinner();
        jComboBox_setTcpNoDelay = new javax.swing.JComboBox();
        jTextField_host = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton_initializeAndSetSocket = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane_descriptionClientSocket = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea_descriptionClientSocket = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane_descriptionServerSocket = new javax.swing.JEditorPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        textArea_descriptionClientSocket = new java.awt.TextArea();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea_valueClientSocket = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable_clientSocket = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea_readFromSocket = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea_written2Socket = new javax.swing.JTextArea();
        jTextField_write2Socket = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jButton_write2Socket = new javax.swing.JButton();
        jButton_readFromSocket = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jButton_screenShotGetir = new javax.swing.JButton();
        jSpinner_timerDelay = new javax.swing.JSpinner();
        jLabel20 = new javax.swing.JLabel();
        jButton_periodicScreenShotGetir = new javax.swing.JButton();
        jButton_ScreenShotAl = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jComboBox_formatName = new javax.swing.JComboBox();
        jButton_timerScreenShotDurdur = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jLabel_screenShot = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        getContentPane().setLayout(new java.awt.CardLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ClientSocket Kur"));

        jSpinner_setTrafficClass.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jSpinner_port.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jSpinner_connectionTime.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jComboBox_setKeepAlive.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "False", "True" }));

        jSpinner_latency.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jSpinner_setReceiveBufferSize.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jSpinner_bandwidth.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jComboBox_setOOBInline.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "False", "True" }));

        jComboBox_setReuseAddress.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "False", "True" }));

        jSpinner_setSendBufferSize.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jComboBox_setSoLinger_On.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "False", "True" }));

        jSpinner_setSoLinger_linger.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jSpinner_timeout.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(-1), Integer.valueOf(-1), null, Integer.valueOf(1)));

        jComboBox_setTcpNoDelay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "False", "True" }));

        jTextField_host.setText("127.0.0.1");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jComboBox_setSoLinger_On, 0, 94, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner_setSoLinger_linger, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinner_setReceiveBufferSize, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                    .addComponent(jComboBox_setReuseAddress, 0, 95, Short.MAX_VALUE)
                                    .addComponent(jSpinner_setSendBufferSize, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                    .addComponent(jComboBox_setTcpNoDelay, 0, 95, Short.MAX_VALUE)
                                    .addComponent(jSpinner_setTrafficClass, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                    .addComponent(jSpinner_timeout, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                                .addGap(100, 100, 100)))
                        .addGap(100, 100, 100))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField_host, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(jSpinner_port, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jComboBox_setKeepAlive, 0, 95, Short.MAX_VALUE)
                        .addGap(200, 200, 200))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_setOOBInline, 0, 95, Short.MAX_VALUE)
                            .addComponent(jSpinner_connectionTime, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner_latency, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner_bandwidth, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jTextField_host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner_port, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(169, 169, 169)
                .addComponent(jComboBox_setKeepAlive)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_setOOBInline)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner_connectionTime)
                    .addComponent(jSpinner_latency)
                    .addComponent(jSpinner_bandwidth))
                .addGap(18, 18, 18)
                .addComponent(jSpinner_setReceiveBufferSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_setReuseAddress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_setSendBufferSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_setSoLinger_On)
                    .addComponent(jSpinner_setSoLinger_linger))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_timeout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_setTcpNoDelay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_setTrafficClass, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addGap(65, 65, 65))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jSpinner_port, jTextField_host});

        jLabel1.setText("Socket()");

        jLabel2.setText("Socket(Proxy proxy)");

        jLabel3.setText("Socket(String host, int port)");

        jLabel4.setText("Socket(InetAddress address, int port)");

        jLabel5.setText("<html>Socket(String host, int port, <br>InetAddress localAddr, int localPort)</html>");

        jLabel6.setText("<html>Socket(InetAddress address, int port, <br>InetAddress localAddr, int localPort)</html>");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("setKeepAlive(boolean on)");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("setOOBInline(boolean on)");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("<html>setPerformancePreferences<br>(int connectionTime, int latency, int bandwidth) </html>");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("setReceiveBufferSize(int size)");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("setReuseAddress(boolean on)");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("setSendBufferSize(int size) ");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("setTrafficClass(int tc)");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("setSoLinger(boolean on, int linger)");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("setSoTimeout(int timeout)");

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("setTcpNoDelay(boolean on)");

        jButton_initializeAndSetSocket.setText("initializeAndSet Socket");
        jButton_initializeAndSetSocket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_initializeAndSetSocketActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jButton_initializeAndSetSocket))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton_initializeAndSetSocket)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel10, jLabel11, jLabel12, jLabel13, jLabel14, jLabel7, jLabel8});

        jTextArea_descriptionClientSocket.setColumns(20);
        jTextArea_descriptionClientSocket.setLineWrap(true);
        jTextArea_descriptionClientSocket.setRows(5);
        jScrollPane2.setViewportView(jTextArea_descriptionClientSocket);

        jTabbedPane_descriptionClientSocket.addTab("String (Verbose - Swing)", jScrollPane2);

        jEditorPane_descriptionServerSocket.setEditable(false);
        jScrollPane4.setViewportView(jEditorPane_descriptionServerSocket);

        jTabbedPane_descriptionClientSocket.addTab("http://docs.oracle.com/", jScrollPane4);

        jScrollPane5.setViewportView(textArea_descriptionClientSocket);

        jTabbedPane_descriptionClientSocket.addTab("Verbose - AWT", jScrollPane5);

        jLabel17.setText("Değer (Value)");

        jTextArea_valueClientSocket.setColumns(20);
        jTextArea_valueClientSocket.setLineWrap(true);
        jTextArea_valueClientSocket.setRows(5);
        jScrollPane3.setViewportView(jTextArea_valueClientSocket);

        jLabel18.setText("Açıklama (Description)");

        jTable_clientSocket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        /////////// Bu kodu internetten buldum.
        // "jTable" ın "currentItemChanged" gibi bir olayı yokmuş.
        // Kendimizin yazması gerekiyor.

        ListSelectionModel rowSM = jTable_clientSocket.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                ListSelectionModel rowSM = (ListSelectionModel)e.getSource();
                //int selectedIndex = rowSM.getMinSelectionIndex();
                // do something with selected index
                uiSwingMetotlar.tableInfo2TextArea(myClientSoketInfos, jTable_clientSocket, jTextArea_descriptionClientSocket);
                uiSwingMetotlar.tableInfo2TextArea(myClientSoketInfos, jTable_clientSocket,jTextArea_valueClientSocket, 1);
                /*try{
                    jEditorPane_descriptionServerSocket.setEditable(false);
                    String url4EditorPane="http://docs.oracle.com/javase/7/docs/api/java/net/ServerSocket.html";
                    kayaNetworkAbstractClass1.tableInfo2EditorPane(mySunucuSoketInfos, jTable_serverSocket, url4EditorPane, jEditorPane_descriptionServerSocket);
                    //jEditorPane_descriptionServerSocket.setPage(new URL("http://docs.oracle.com/"));
                }
                catch(Exception myexception)
                {
                    jEditorPane_descriptionServerSocket.setText(myexception.toString());
                }*/
            }
        });

        ///////////
        jScrollPane6.setViewportView(jTable_clientSocket);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane_descriptionClientSocket, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(375, 375, 375))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(317, 317, 317)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane_descriptionClientSocket, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addGap(162, 162, 162))
        );

        jTabbedPane1.addTab("Property-Value-Description", jPanel2);

        jLabel21.setText("readFromSocket");

        jTextArea_readFromSocket.setColumns(20);
        jTextArea_readFromSocket.setLineWrap(true);
        jTextArea_readFromSocket.setRows(5);
        jScrollPane10.setViewportView(jTextArea_readFromSocket);

        jLabel22.setText("written2Socket");

        jTextArea_written2Socket.setColumns(20);
        jTextArea_written2Socket.setLineWrap(true);
        jTextArea_written2Socket.setRows(5);
        jScrollPane11.setViewportView(jTextArea_written2Socket);

        jLabel23.setText("To be Written to Socket");

        jButton_write2Socket.setText("PrintWriter.println(jTextField_write2Socket.getText())");
        jButton_write2Socket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_write2SocketActionPerformed(evt);
            }
        });

        jButton_readFromSocket.setText("BufferedReader.readLine()");
        jButton_readFromSocket.setEnabled(false);
        jButton_readFromSocket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_readFromSocketActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(jTextField_write2Socket, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(jButton_write2Socket, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(jButton_readFromSocket, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_readFromSocket)
                .addGap(36, 36, 36)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_write2Socket, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_write2Socket)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reading from and Writing to a Socket", jPanel6);

        jButton_screenShotGetir.setText("screenShotGetir() + bufferefImage2JLabel()");
        jButton_screenShotGetir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_screenShotGetirActionPerformed(evt);
            }
        });

        jLabel20.setText("Timer.setDelay(delay);");

        jButton_periodicScreenShotGetir.setText("periodicScreenShotGetir()");
        jButton_periodicScreenShotGetir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_periodicScreenShotGetirActionPerformed(evt);
            }
        });

        jButton_ScreenShotAl.setText("ScreenShotAl()");
        jButton_ScreenShotAl.setEnabled(false);
        jButton_ScreenShotAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ScreenShotAlActionPerformed(evt);
            }
        });

        jLabel24.setText("formatName");

        jComboBox_formatName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "png", "jpg", "gif", "bmp" }));

        jButton_timerScreenShotDurdur.setText("timerScreenShotDurdur()");
        jButton_timerScreenShotDurdur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_timerScreenShotDurdurActionPerformed(evt);
            }
        });

        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane7.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jLabel_screenShot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_screenShot.setText("Buraya ScreenShot gelecek.");
        jScrollPane7.setViewportView(jLabel_screenShot);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_screenShotGetir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox_formatName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jSpinner_timerDelay, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton_ScreenShotAl, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                    .addComponent(jButton_periodicScreenShotGetir, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(312, 312, 312)
                        .addComponent(jButton_timerScreenShotDurdur, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 591, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton_screenShotGetir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jSpinner_timerDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_periodicScreenShotGetir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_ScreenShotAl)
                    .addComponent(jLabel24)
                    .addComponent(jComboBox_formatName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jButton_timerScreenShotDurdur)
                .addContainerGap())
        );

        jTabbedPane1.addTab("ScreenShot", jPanel8);
        jTabbedPane1.addTab("Dosya Read", jScrollPane8);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE))
                .addContainerGap(180, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_readFromSocketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_readFromSocketActionPerformed
        // TODO add your handling code here:
        String gelenMesaj;

        try {
            gelenMesaj = kayaNetworkAbstractClass1.readFromSoket(myClientSoket, paramsforClientSocket, host);
            //myClientSoketInfos=kayaNetworkAbstractClass1.socketBilgileri(myClientSoket);
            //kayaNetworkAbstractClass1.bilgiler2Table(myClientSoketInfos, jTable_clientSocket);
            if (gelenMesaj.isEmpty()) {
                jTextArea_readFromSocket.append("YOK\n");
            } else {
                jTextArea_readFromSocket.append(gelenMesaj + "\n");
            }
        } catch (Exception ex) {
            Logger.getLogger(kayasClientSocket.class.getName()).log(Level.SEVERE, null, ex);
            textArea_descriptionClientSocket.append(ex.toString());
        }

    }//GEN-LAST:event_jButton_readFromSocketActionPerformed

    private void jButton_write2SocketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_write2SocketActionPerformed
        // TODO add your handling code here:
        String gidecekMesaj = jTextField_write2Socket.getText().trim();
        try {
            //kayaNetworkAbstractClass1.write2Soket(myClientSoket, gidecekMesaj, paramsforClientSocket, host);
            kayaNetworkAbstractClass1.write2Soket(myClientSoket, gidecekMesaj, false);
            jTextArea_written2Socket.append(gidecekMesaj + "\n");
        } catch (IOException ex) {
            Logger.getLogger(kayasClientSocket.class.getName()).log(Level.SEVERE, null, ex);
            textArea_descriptionClientSocket.append(ex.toString() + "\n");
            jTextArea_written2Socket.append(ex.toString() + "\n");
        }
//        try {
//            myClientSoket.close();
//        } catch (IOException ex) {
//            Logger.getLogger(kayasClientSocket.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jButton_write2SocketActionPerformed

    private void jButton_initializeAndSetSocketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_initializeAndSetSocketActionPerformed
        // TODO add your handling code here:

        paramsforClientSocket = new LinkedList<Integer>();
        host = jTextField_host.getText().trim();
        paramsforClientSocket.add((Integer) jSpinner_port.getValue());
        paramsforClientSocket.add((Integer) jComboBox_setKeepAlive.getSelectedIndex());//do nothing indeks=0,  false indeks=1, true indeks=2
        paramsforClientSocket.add((Integer) jComboBox_setOOBInline.getSelectedIndex());
        paramsforClientSocket.add((Integer) jSpinner_connectionTime.getValue());
        paramsforClientSocket.add((Integer) jSpinner_latency.getValue());
        paramsforClientSocket.add((Integer) jSpinner_bandwidth.getValue());
        paramsforClientSocket.add((Integer) jSpinner_setReceiveBufferSize.getValue());
        paramsforClientSocket.add((Integer) jComboBox_setReuseAddress.getSelectedIndex());   //do nothing indeks=0,  false indeks=1, true indeks=2
        paramsforClientSocket.add((Integer) jSpinner_setSendBufferSize.getValue());
        paramsforClientSocket.add((Integer) jComboBox_setSoLinger_On.getSelectedIndex());
        paramsforClientSocket.add((Integer) jSpinner_setSoLinger_linger.getValue());
        paramsforClientSocket.add((Integer) jSpinner_timeout.getValue());
        paramsforClientSocket.add((Integer) jComboBox_setTcpNoDelay.getSelectedIndex());
        paramsforClientSocket.add((Integer) jSpinner_setTrafficClass.getValue());

        try {
            myClientSoket = kayaNetworkAbstractClass1.initializeAndSetSocket(paramsforClientSocket, host);
            myClientSoketInfos = kayaNetworkAbstractClass1.socketBilgileri(myClientSoket);
            uiSwingMetotlar.bilgiler2Table(myClientSoketInfos, jTable_clientSocket);
            //String mesaj=kayaNetworkAbstractClass1.readFromSoket(myClientSoket);
            //jTextArea_readFromSocket.append(mesaj);

            //Thread serverDinleThread = new Thread() {
            serverDinleThread = new Thread() {

                @Override
                public void run() {
                    try {
                        // A0-A1 arasındaki kod bir "Thread" içinde çalışmalı.
                        // Eğer Thread içinde çalışmazsa "jButton_acceptActionPerformed" metodu sonsuz döngüye girer ve program GUI donar.
                        //A0
                        //soketThread = new kayasSocketThread(myClientSoket, jTextArea_readFromSocket);
                        //soketThread = new kayasSocketThread(myClientSoket, jTextArea_readFromSocket, jLabel_screenShot);
                        
                        LinkedList<Object> listeDinleyenler=new LinkedList<Object>();
                        listeDinleyenler.add(kayasClientSocket.this);
                        soketThread = new kayasSocketThread(myClientSoket, listeDinleyenler);

                        soketThread.run();
                        //A1

                    } catch (Exception e) {
                        jTextArea_descriptionClientSocket.append("\n" + e.toString());
                    }
                }
            };

            serverDinleThread.start();  // thread başlasın.
        } catch (Exception ex) {
            Logger.getLogger(kayasClientSocket.class.getName()).log(Level.SEVERE, null, ex);
            textArea_descriptionClientSocket.append(ex.toString());
        }

    }//GEN-LAST:event_jButton_initializeAndSetSocketActionPerformed

    private void jButton_screenShotGetirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_screenShotGetirActionPerformed
        try {
            uiSwingMetotlar.periodicScreenShotGetir(jLabel_screenShot);
        } catch (Exception ex) {
            Logger.getLogger(kayasServerSocketUI.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jButton_screenShotGetirActionPerformed

    private void jButton_periodicScreenShotGetirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_periodicScreenShotGetirActionPerformed
        /*try {
        // TODO add your handling code here:
        BufferedImage bi = kayaNetworkAbstractClass1.screenShotGetir();
        byte[] resimByteDizi = kayaNetworkAbstractClass1.bufferedImage2ByteArray(bi);
        String a=new String(resimByteDizi);
        int peryot = (Integer) jSpinner_port.getValue();
        kayaNetworkAbstractClass1.periodicScreenShot2Soket(MTSunucu.clientSoket, peryot);
        } catch (AWTException ex) {
        Logger.getLogger(kayasServerSocketUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
        Logger.getLogger(kayasServerSocketUI.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        int peryotOfScreenShot = (Integer) jSpinner_timerDelay.getValue();
        String formatTip = jComboBox_formatName.getSelectedItem().toString();
        //String gidecekMesaj = "screenShotGetir" + peryotOfScreenShot + "," + formatTip;
        try {
            kayaNetworkAbstractClass1.requestPeriodicScreenShot(peryotOfScreenShot, formatTip, myClientSoket);
           // kayaNetworkAbstractClass1.write2Soket(myClientSoket, gidecekMesaj, false);
          //  jTextArea_written2Socket.append(gidecekMesaj + "\n");
        } catch (IOException ex) {
            Logger.getLogger(kayasClientSocket.class.getName()).log(Level.SEVERE, null, ex);
            textArea_descriptionClientSocket.append(ex.toString() + "\n");
            jTextArea_written2Socket.append(ex.toString() + "\n");
        }
}//GEN-LAST:event_jButton_periodicScreenShotGetirActionPerformed

    private void jButton_ScreenShotAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ScreenShotAlActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jButton_ScreenShotAlActionPerformed

    private void jButton_timerScreenShotDurdurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_timerScreenShotDurdurActionPerformed
        // TODO add your handling code here:
        //String gidecekMesaj = "timerScreenShotDurdur";
        try {
          //  kayaNetworkAbstractClass1.write2Soket(myClientSoket, gidecekMesaj, false);
            //jTextArea_written2Socket.append(gidecekMesaj + "\n");
            kayaNetworkAbstractClass1.requestTimerScreenShotDurdur(myClientSoket);
        } catch (IOException ex) {
            Logger.getLogger(kayasClientSocket.class.getName()).log(Level.SEVERE, null, ex);
            textArea_descriptionClientSocket.append(ex.toString() + "\n");
            jTextArea_written2Socket.append(ex.toString() + "\n");
        }
    }//GEN-LAST:event_jButton_timerScreenShotDurdurActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new kayasClientSocket().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_ScreenShotAl;
    private javax.swing.JButton jButton_initializeAndSetSocket;
    private javax.swing.JButton jButton_periodicScreenShotGetir;
    private javax.swing.JButton jButton_readFromSocket;
    private javax.swing.JButton jButton_screenShotGetir;
    private javax.swing.JButton jButton_timerScreenShotDurdur;
    private javax.swing.JButton jButton_write2Socket;
    private javax.swing.JComboBox jComboBox_formatName;
    private javax.swing.JComboBox jComboBox_setKeepAlive;
    private javax.swing.JComboBox jComboBox_setOOBInline;
    private javax.swing.JComboBox jComboBox_setReuseAddress;
    private javax.swing.JComboBox jComboBox_setSoLinger_On;
    private javax.swing.JComboBox jComboBox_setTcpNoDelay;
    private javax.swing.JEditorPane jEditorPane_descriptionServerSocket;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_screenShot;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSpinner jSpinner_bandwidth;
    private javax.swing.JSpinner jSpinner_connectionTime;
    private javax.swing.JSpinner jSpinner_latency;
    private javax.swing.JSpinner jSpinner_port;
    private javax.swing.JSpinner jSpinner_setReceiveBufferSize;
    private javax.swing.JSpinner jSpinner_setSendBufferSize;
    private javax.swing.JSpinner jSpinner_setSoLinger_linger;
    private javax.swing.JSpinner jSpinner_setTrafficClass;
    private javax.swing.JSpinner jSpinner_timeout;
    private javax.swing.JSpinner jSpinner_timerDelay;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane_descriptionClientSocket;
    private javax.swing.JTable jTable_clientSocket;
    private javax.swing.JTextArea jTextArea_descriptionClientSocket;
    private javax.swing.JTextArea jTextArea_readFromSocket;
    private javax.swing.JTextArea jTextArea_valueClientSocket;
    private javax.swing.JTextArea jTextArea_written2Socket;
    private javax.swing.JTextField jTextField_host;
    private javax.swing.JTextField jTextField_write2Socket;
    private java.awt.TextArea textArea_descriptionClientSocket;
    // End of variables declaration//GEN-END:variables
}
